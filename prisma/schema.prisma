generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             Int              @id @default(autoincrement())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  Comment        Comment[]
  CommentLike    CommentLike[]
  sessions       Session[]
  Workout        Workout[]
  WorkoutDislike WorkoutDislike[]
  WorkoutLike    WorkoutLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id                Int              @id(map: "PK_Workout") @default(autoincrement())
  fkCreatedByUserId Int
  title             String           @db.VarChar(200)
  excerpt           String           @db.VarChar(2000)
  quill_delta_json  String           @db.Text
  quill_html        String           @db.Text
  quill_plain_text  String           @db.Text
  createdOn         DateTime         @default(now(), map: "DF_Workout_createdOn") @db.Date
  lastModifiedOn    DateTime         @default(now(), map: "DF_Workout_lastModifiedOn") @db.Date
  Comment           Comment[]
  User              User             @relation(fields: [fkCreatedByUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Workout_User")
  WorkoutDislike    WorkoutDislike[]
  WorkoutLike       WorkoutLike[]
}

model WorkoutDislike {
  id          Int     @id(map: "PK_WorkoutDislike") @default(autoincrement())
  fkUserId    Int
  fkWorkoutId Int
  User        User    @relation(fields: [fkUserId], references: [id], onUpdate: NoAction, map: "FK_WorkoutDislike_User")
  Workout     Workout @relation(fields: [fkWorkoutId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_WorkoutDislike_Workout")

  @@unique([fkUserId, fkWorkoutId], map: "UQ_WorkoutDislike")
}

model WorkoutLike {
  id          Int     @id(map: "PK_WorkoutLike") @default(autoincrement())
  fkUserId    Int
  fkWorkoutId Int
  User        User    @relation(fields: [fkUserId], references: [id], onUpdate: NoAction, map: "FK_WorkoutLike_User")
  Workout     Workout @relation(fields: [fkWorkoutId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_WorkoutLike_Workout")

  @@unique([fkUserId, fkWorkoutId], map: "UQ_WorkoutLike")
}

model Comment {
  id                Int           @id(map: "PK_Comment") @default(autoincrement())
  fkParentCommentId Int
  fkUserId          Int
  fkWorkoutId       Int
  commentText       String        @db.VarChar(2000)
  isDeleted         Boolean
  createdOn         DateTime      @default(now(), map: "DF_Comment_createdOn") @db.SmallDateTime
  Comment           Comment       @relation("CommentToComment", fields: [fkParentCommentId], references: [id], onUpdate: NoAction, map: "FK_Comment_ParentComment")
  other_Comment     Comment[]     @relation("CommentToComment")
  User              User          @relation(fields: [fkUserId], references: [id], onUpdate: NoAction, map: "FK_Comment_User")
  Workout           Workout       @relation(fields: [fkWorkoutId], references: [id], onUpdate: NoAction, map: "FK_Comment_Workout")
  CommentLike       CommentLike[]
}

model CommentLike {
  id          Int     @id(map: "PK_CommentLike") @default(autoincrement())
  fkUserId    Int
  fkCommentId Int
  Comment     Comment @relation(fields: [fkCommentId], references: [id], onUpdate: NoAction, map: "FK_CommentLike_Comment")
  User        User    @relation(fields: [fkUserId], references: [id], onUpdate: NoAction, map: "FK_CommentLike_User")
}

view VwWorkout {
  workoutId         Int      @unique
  title             String   @db.VarChar(200)
  excerpt           String   @db.VarChar(2000)
  quill_html        String   @db.Text
  createdByUserName String?
  createdByUserId   Int
  likes             Int
  dislikes          Int
  comments          Int
  lastModifiedOn    DateTime @db.Date
}
